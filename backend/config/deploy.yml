# Name of your application. Used to uniquely configure containers.
service: remindly-backend

# Name of the container image.
image: navjeetc/remindly-backend

# Deploy to these servers.
servers:
  web:
    - 161.35.104.56

# Enable SSL auto certification via Let's Encrypt
proxy:
  ssl: true
  host: remindly.anakhsoft.com

# Credentials for your image host (DigitalOcean Container Registry)
registry:
  server: registry.digitalocean.com/anakhsoft
  username: navjeetc
  password:
    - KAMAL_REGISTRY_PASSWORD

# Environment variables
env:
  clear:
    RAILS_SERVE_STATIC_FILES: "true"
    RAILS_LOG_TO_STDOUT: "true"
    RAILS_ENV: "production"
    APP_VERSION: "0.2.3"
  secret:
    - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
volumes:
  - "storage:/rails/storage"

# Asset bridging disabled - assets served directly from container
# asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64
  args:
    RUBY_VERSION: 3.3.5

# Use a different ssh user than root
ssh:
  user: navjeetc

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
